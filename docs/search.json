[
  {
    "objectID": "posts/常用包和函数汇总/index.html",
    "href": "posts/常用包和函数汇总/index.html",
    "title": "常用包和函数汇总",
    "section": "",
    "text": "列名清洗: janitor::clean_names()，将命名不一致的列名统一规范化"
  },
  {
    "objectID": "posts/常用包和函数汇总/index.html#数据可视化",
    "href": "posts/常用包和函数汇总/index.html#数据可视化",
    "title": "常用包和函数汇总",
    "section": "数据可视化",
    "text": "数据可视化\n\nggplot 主题风格拓展：hrbrthemes"
  },
  {
    "objectID": "posts/hrbrthemes：最好用的ggplot主题扩展包/index.html",
    "href": "posts/hrbrthemes：最好用的ggplot主题扩展包/index.html",
    "title": "hrbrthemes：最好用的 ggplot 主题扩展包",
    "section": "",
    "text": "ggplot 好用归好用，但是默认主题给人的感觉还是过于呆板，一直想找一个比较美观的 ggplot 主题拓展包。\n恰好看到 Awesome ggplot2 有收集 ggplot 的主题拓展，遂逐一尝试了一下。\n经过筛选，发现只有 hrbrthemes 满足自己的要求：第一，风格简约，足够美观；第二，语法与 ggplot2 保持一致，符合使用习惯。"
  },
  {
    "objectID": "posts/hrbrthemes：最好用的ggplot主题扩展包/index.html#使用方法",
    "href": "posts/hrbrthemes：最好用的ggplot主题扩展包/index.html#使用方法",
    "title": "hrbrthemes：最好用的 ggplot 主题扩展包",
    "section": "使用方法",
    "text": "使用方法\n\n# 包引入\nlibrary(tidyverse)\nlibrary(hrbrthemes)\nlibrary(datasets)\nlibrary(patchwork) #控制多张图表的位置摆放\n\n使用 datasets package 内置的 airquality 数据集来做测试。\n\nknitr::kable(head(airquality))\n\n\n\n\nOzone\nSolar.R\nWind\nTemp\nMonth\nDay\n\n\n\n\n41\n190\n7.4\n67\n5\n1\n\n\n36\n118\n8.0\n72\n5\n2\n\n\n12\n149\n12.6\n74\n5\n3\n\n\n18\n313\n11.5\n62\n5\n4\n\n\nNA\nNA\n14.3\n56\n5\n5\n\n\n28\nNA\n14.9\n66\n5\n6\n\n\n\n\n\n\n内置主题函数\n\n# ggplot默认主题作图\nplot1 <- airquality %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point()\n\n# 使用hrbrthemes的默认主题作图\nplot2 <- airquality %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point() +\n  theme_ipsum()\n\n# 将两张图并列对比\nplot1 + plot2\n\n\n\n\n通过比较可以发现，theme_ipsum 将默认的背景色去掉了，并对横轴和纵轴的图例做了处理：将其字体变小，并将位置从中心处挪到边沿处。整体上变得更加简约和美观。\n使用 ?theme_ipsum 可以进一步看到该主题的内置参数，挑选几个比较重要的参数展示一下。\n1、grid 控制网格，默认是保留X轴和Y轴的网格，如需改变，可以直接使用 grid = '' 删除网格，或者使用 grid = 'X' 只保留X轴的网格。\n\nairquality %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point() +\n  theme_ipsum(grid = 'X')\n\n\n\n\n2、axis 控制横纵轴的起始轴线，默认是删除的，如果需要保留，使用方法和 grid 类似：\n\nairquality %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point() +\n  theme_ipsum(axis = 'XY')\n\n\n\n\n3、使用 base_family 控制字体。英文的主题风格，中文如果直接使用默认字体，效果一般不好。经过测试，苹果系统使用华文细黑 STXihei 字体的效果比较好。\n\nairquality %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point() +\n  labs(title = '散点图', x = '风速', y = '温度') +\n  theme_ipsum(base_family = 'STXihei')\n\n\n\n\n4、除了以上参数，theme_ipsum 主题函数还可以设置如下参数：标题 plot_title_、副标题 subtitle_、分面标题 strip_text_、注释 caption_、横纵坐标值 axis_title_等。\n5、除了 theme_ipsum，还有 theme_ipsum_es()、theme_tinyhand()、theme_ft_rc() 等主题风格。\n\nplot3 <- airquality %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point() +\n  labs(title = '散点图', x = '风速', y = '温度') +\n  theme_ft_rc(base_family = 'STXihei')\n\nplot4 <- airquality %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point() +\n  labs(title = '散点图', x = '风速', y = '温度') +\n  theme_ipsum_rc(base_family = 'STXihei')\n\nplot3 + plot4\n\n\n\n\n\n\n内置色彩系统\nhrbrthemes 也内置了色彩系统，方便直接调用。例如 scale_color_ipsum() 和 scale_color_ft()：\n\np5 <- airquality %>%\n  mutate(Month = as.factor(Month)) %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point(aes(color = Month)) +\n  scale_color_ipsum() +\n  theme_ipsum()\n\np6 <- airquality %>%\n  mutate(Month = as.factor(Month)) %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point(aes(color = Month)) +\n  scale_color_ft() +\n  theme_ipsum()\n\np5 + p6\n\n\n\n\n也可以使用 ipsum_pal() 和 ft_pal() 直接返回颜色编码字符串。\n\nscales::show_col(ipsum_pal()(9))\n\n\n\nscales::show_col(ft_pal()(9))"
  },
  {
    "objectID": "posts/hrbrthemes：最好用的ggplot主题扩展包/index.html#相关资源",
    "href": "posts/hrbrthemes：最好用的ggplot主题扩展包/index.html#相关资源",
    "title": "hrbrthemes：最好用的 ggplot 主题扩展包",
    "section": "相关资源",
    "text": "相关资源\n\nhrbrthemes Github page\nMan pages for hrbrthemes"
  },
  {
    "objectID": "posts/使用 waffle package 制作华夫饼图/index.html",
    "href": "posts/使用 waffle package 制作华夫饼图/index.html",
    "title": "使用 waffle package 制作华夫饼图",
    "section": "",
    "text": "今天制作的是华夫饼图，灵感参照自 bydata 的 #30DayChartChallenge。\n原始图片及使用 ggplot2 制图的最终效果如下：\n\n\n\n\n\n\n原始图片\n\n\n\n\n\n\n\n最终效果"
  },
  {
    "objectID": "posts/使用 waffle package 制作华夫饼图/index.html#包加载",
    "href": "posts/使用 waffle package 制作华夫饼图/index.html#包加载",
    "title": "使用 waffle package 制作华夫饼图",
    "section": "包加载",
    "text": "包加载\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(waffle)"
  },
  {
    "objectID": "posts/使用 waffle package 制作华夫饼图/index.html#导入数据",
    "href": "posts/使用 waffle package 制作华夫饼图/index.html#导入数据",
    "title": "使用 waffle package 制作华夫饼图",
    "section": "导入数据",
    "text": "导入数据\n\nraw_data <- read_xlsx(\"sdg_07_40_page_spreadsheet.xlsx\", sheet = 3, skip = 8, na = \":\") \n\n这里需要注意，原始数据中 missing data 使用 : 表示，因此需使用参数 na = \":\" 将 : 转换成 NA 。"
  },
  {
    "objectID": "posts/使用 waffle package 制作华夫饼图/index.html#数据清洗",
    "href": "posts/使用 waffle package 制作华夫饼图/index.html#数据清洗",
    "title": "使用 waffle package 制作华夫饼图",
    "section": "数据清洗",
    "text": "数据清洗\n\n# 对原始数据进行数据清洗\nclean_data <- raw_data %>%\n  # 过滤掉带有NA的行\n  drop_na() %>%\n  # 仅选择2020年的数据\n  select(Country = TIME, pct = `2020`) %>%\n  # 过滤掉国家名太长的国家（主要表示某个区域或者国家联盟）\n  filter(str_length(Country) <= 18) %>%\n  # 随机选择20个国家进行可视化\n  sample_n(20) %>%\n  mutate(pct = as.numeric(pct) %>% round(0)) %>%\n  # 按照比例从大到小排序\n  mutate(Country = fct_reorder(Country, -pct, sum)) %>%\n  mutate(reverse_pct = 100 - pct) %>%\n  pivot_longer(cols = pct:reverse_pct, names_to = 'type', values_to = 'value') %>%\n  mutate(value_pct = str_c(value, \"%\"))\n\n\nknitr::kable(head(clean_data))\n\n\n\n\nCountry\ntype\nvalue\nvalue_pct\n\n\n\n\nBulgaria\npct\n23\n23%\n\n\nBulgaria\nreverse_pct\n77\n77%\n\n\nLatvia\npct\n42\n42%\n\n\nLatvia\nreverse_pct\n58\n58%\n\n\nPoland\npct\n16\n16%\n\n\nPoland\nreverse_pct\n84\n84%"
  },
  {
    "objectID": "posts/使用 waffle package 制作华夫饼图/index.html#画图和调整",
    "href": "posts/使用 waffle package 制作华夫饼图/index.html#画图和调整",
    "title": "使用 waffle package 制作华夫饼图",
    "section": "画图和调整",
    "text": "画图和调整\n直接上代码：\n\nwaffle_plot <- clean_data %>%\n  ggplot(aes(fill = type, values = value)) +\n  geom_waffle(color = \"white\", size = 0.5, n_rows = 10) +\n  facet_wrap(~ Country, ncol= 5) +\n  # 横纵坐标轴的坐标和数值全部删除\n  scale_x_discrete(expand=c(0,0)) +\n  scale_y_discrete(expand=c(0,0)) +\n  guides(fill = 'none') +\n  # 横纵坐标比例相等，使得华夫饼图呈现为正方形\n  coord_equal() +\n  labs(\n    title = 'Share of renewable energy in gross final energy consumption (2020)',\n    caption = 'Source: European Environment Agency (EEA)'\n  ) +\n  theme(\n    strip.background = element_blank(),\n    # 分面标题加粗\n    strip.text = element_text(face = 'bold'))\n\n\n# 输出ggplot制图结果\nwaffle_plot\n\n\n\n\n经过 Figma 调整后的图片如下："
  },
  {
    "objectID": "posts/使用 waffle package 制作华夫饼图/index.html#注意事项",
    "href": "posts/使用 waffle package 制作华夫饼图/index.html#注意事项",
    "title": "使用 waffle package 制作华夫饼图",
    "section": "注意事项",
    "text": "注意事项\n如果遇到首次使用geom_waffle()函数报错，可以用如下方法解决：\n\nremotes::install_github(\"hrbrmstr/waffle\")\n关闭Rstudio后重新打开，问题解决\n解决方法来自https://github.com/hrbrmstr/waffle/issues/76"
  },
  {
    "objectID": "posts/使用 waffle package 制作华夫饼图/index.html#相关资源",
    "href": "posts/使用 waffle package 制作华夫饼图/index.html#相关资源",
    "title": "使用 waffle package 制作华夫饼图",
    "section": "相关资源",
    "text": "相关资源\n\nwaffle Github\nwaffle 官方文档\nR 使用 waffle 套件繪製鬆餅圖教學與範例"
  },
  {
    "objectID": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html",
    "href": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html",
    "title": "使用 ggalluvial 制作桑基图和凹凸图",
    "section": "",
    "text": "library(tidyverse)\nlibrary(ggalluvial)\nlibrary(hrbrthemes)\nlibrary(patchwork)"
  },
  {
    "objectID": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#数据准备",
    "href": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#数据准备",
    "title": "使用 ggalluvial 制作桑基图和凹凸图",
    "section": "数据准备",
    "text": "数据准备\n\n\n\n\nknitr::kable(head(city_data))\n\n\n\n\nfre_city_level\njob_city_level\ntotal\n\n\n\n\n一线城市\n一线城市\n58\n\n\n一线城市\n三线城市\n11\n\n\n一线城市\n二线城市\n17\n\n\n一线城市\n五线城市\n2\n\n\n一线城市\n四线城市\n3\n\n\n一线城市\n新一线城市\n56"
  },
  {
    "objectID": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#桑基图",
    "href": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#桑基图",
    "title": "使用 ggalluvial 制作桑基图和凹凸图",
    "section": "桑基图",
    "text": "桑基图\n先直接看个例子。\n\np1 <- city_data %>%\n  ggplot(aes(axis1 = fre_city_level, axis2 = job_city_level, y = total)) +\n  geom_alluvium(aes(fill = job_city_level)) +\n  geom_stratum() +\n  geom_text(stat = \"stratum\",\n            aes(label = after_stat(stratum)), family = 'STXihei') +\n  scale_x_discrete(expand = c(0,0), limits = c('投出简历次数', '接收简历次数')) +\n  scale_y_continuous(expand = c(0,0)) +\n  labs(x = '', y = '') +\n  guides(y = 'none', fill = 'none') +\n  theme_ipsum(base_family = \"STXihei\", grid = '') \n\np1\n\n\n\n\naxis 表示桑基图要流经的变量。例如现在我们要看不同线级城市之间的简历数量流动情况，则 axis1 = fre_city_level 表示简历从常驻线级城市流出；axis2 = job_city_level 表示流入到职位所在的线级城市。\ngeom_stratum() 是给流动变量做进一步分类，例如 fre_city_level 和 job_city_level 都被分为五个线级城市。另外，geom_text() 里 stat = \"stratum\" 和 label = after_stat(stratum) 是 ggalluvial 内置的固定用法，照着用即可。\ngeom_alluvium() 中，fill 参数控制的是流动线条的颜色。fill = job_city_level 表示我们以简历流入地为观察视角，看不同线级城市各流入了多少简历。这里也可以简历流出地为观察视角，只需要设置 fill = job_city_level 即可。\n\np2 <- city_data %>%\n  ggplot(aes(axis1 = fre_city_level, axis2 = job_city_level, y = total)) +\n  geom_alluvium(aes(fill = job_city_level), curve_type = \"linear\") +\n  geom_stratum() +\n  geom_text(stat = \"stratum\",\n            aes(label = after_stat(stratum)), family = 'STXihei') +\n  scale_x_discrete(expand = c(0,0), limits = c('投出简历次数', '接收简历次数')) +\n  scale_y_continuous(expand = c(0,0)) +\n  labs(x = '', y = '') +\n  guides(y = 'none', fill = 'none') +\n  theme_ipsum(base_family = \"STXihei\", grid = '') \n\np2\n\n\n\n\n基本用法之外，geom_alluvium() 函数还有一个 curve_type 参数，curve_type =  \"linear\" 表示线条使用直线。除了 linear，还有 cubic、cubic、quintic 等值，但是肉眼看不出太大区别。\n最后需要注意的是，制作桑基图时一般使用宽数据，操作如上所示。长数据也可，只是没有那么容易理解，这里不再演示。"
  },
  {
    "objectID": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#凹凸图",
    "href": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#凹凸图",
    "title": "使用 ggalluvial 制作桑基图和凹凸图",
    "section": "凹凸图",
    "text": "凹凸图\n在看文档的时候，意外发现 ggalluvial 不仅可以制作桑基图，还可以用来制作凹凸图。\n\n# 使用 alluvial package 内置的数据集 Refugees 做测试\ndata(Refugees, package = \"alluvial\")\n\nknitr::kable(head(Refugees))\n\n\n\n\ncountry\nyear\nrefugees\n\n\n\n\nAfghanistan\n2003\n2136043\n\n\nBurundi\n2003\n531637\n\n\nCongo DRC\n2003\n453465\n\n\nIraq\n2003\n368580\n\n\nMyanmar\n2003\n151384\n\n\nPalestine\n2003\n350568\n\n\n\n\n\n还是直接上个例子。\n\np3 <- Refugees %>%\n  ggplot(\n       aes(x = year, \n           y = refugees/10000, \n           alluvium = country)) +\n  geom_alluvium(aes(fill = country, colour = country), \n                alpha = .75, decreasing = FALSE) +  # decreasing一定要设置为FALSE\n  scale_x_continuous(breaks = seq(2003, 2013, 2)) +\n  theme_ipsum(grid = 'XY') +\n  scale_fill_brewer(type = \"qual\", palette = \"Set3\") +\n  scale_color_brewer(type = \"qual\", palette = \"Set3\") +\n  ggtitle(\"refugee volume by country and region of origin\")\n\np3\n\n\n\n\n上面的 x 轴是年份，y 轴是难民数量，alluvium 表示线条的类别，这里表示难民来自哪个国家。注意要把 geom_alluvium() 中的 decreasing 参数设置为 FALSE。\n另外 geom_alluvium 中的 width 参数表示不同年份变化中间的留白，width = 1 表示不需要任何留白，经试验，把值设置成 0.5 较为美观。\n\np4 <- Refugees %>%\n  ggplot(\n       aes(x = year, \n           y = refugees/10000, \n           alluvium = country)) +\n  geom_alluvium(aes(fill = country, colour = country),\n                alpha = .75, decreasing = FALSE,\n                width = 1) +  # decreasing一定要设置为FALSE\n  scale_x_continuous(breaks = seq(2003, 2013, 2)) +\n  theme_ipsum(grid = 'XY') +\n  scale_fill_brewer(type = \"qual\", palette = \"Set3\") +\n  scale_color_brewer(type = \"qual\", palette = \"Set3\") +\n  guides(fill = 'none', color = 'none') +\n  ggtitle(\"widht = 1\")\n\np5 <- Refugees %>%\n  ggplot(\n       aes(x = year, \n           y = refugees/10000, \n           alluvium = country)) +\n  geom_alluvium(aes(fill = country, colour = country),\n                alpha = .75, decreasing = FALSE,\n                width = 0.5) +  \n  scale_x_continuous(breaks = seq(2003, 2013, 2)) +\n  theme_ipsum(grid = 'XY') +\n  scale_fill_brewer(type = \"qual\", palette = \"Set3\") +\n  scale_color_brewer(type = \"qual\", palette = \"Set3\") +\n  guides(fill = 'none', color = 'none') +\n  ggtitle(\"width = 0.5\")\n\np4 + p5"
  },
  {
    "objectID": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#注意事项",
    "href": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#注意事项",
    "title": "使用 ggalluvial 制作桑基图和凹凸图",
    "section": "注意事项",
    "text": "注意事项\n\nstat_stratum()函数报错\n首次使用 stat_stratum() 函数为数据分类分层时，遇到报错： Computation failed in stat_stratum。\n在 ggalluvial 的 Github Issues 里找到了解决方法：将 dplyr 升级至 1.1.0 以后版本。\n\n\n流入地和流出地的分类类别不能完全一致\n在桑基图的例子中，流入地和流出地都是线级城市，分类类型完全一致，首次 run 的时候报错了。这里用了一个笨办法来解决：给标签重命名，即在X线城市前面加了个空格，在图表显示的时候看不出来。\n\ncity_data <- city_data %>%\n  mutate(fre_city_level = fct_relevel(fre_city_level, c(' 一线城市', ' 新一线城市', ' 二线城市', ' 三线城市', ' 四线城市', ' 五线城市')))"
  },
  {
    "objectID": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#相关资源",
    "href": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#相关资源",
    "title": "使用 ggalluvial 制作桑基图和凹凸图",
    "section": "相关资源",
    "text": "相关资源\n\nggalluvial Github Page\nAlluvial Plots in ggplot2\nR Charts: Alluvial plot in ggplot2 with ggalluvial"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Boyce’s Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n常用包和函数汇总\n\n\n\n\n\n\n\nR\n\n\n清单\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\nBoyce\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhrbrthemes：最好用的 ggplot 主题扩展包\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\n\n\n\n\n\n\n\n\n\nFeb 25, 2023\n\n\nBoyce\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n使用 ggalluvial 制作桑基图和凹凸图\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\n\n\n\n\n\n\n\n\n\nFeb 23, 2023\n\n\nBoyce\n\n\n\n\n\n\n  \n\n\n\n\n使用 waffle package 制作华夫饼图\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\n\n\n\n\n\n\n\n\n\nDec 7, 2022\n\n\nBoyce\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]