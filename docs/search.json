[
  {
    "objectID": "posts/常用包和函数汇总/index.html",
    "href": "posts/常用包和函数汇总/index.html",
    "title": "常用包和函数汇总",
    "section": "",
    "text": "列名清洗: janitor::clean_names()，将命名不一致的列名统一规范化"
  },
  {
    "objectID": "posts/常用包和函数汇总/index.html#数据可视化",
    "href": "posts/常用包和函数汇总/index.html#数据可视化",
    "title": "常用包和函数汇总",
    "section": "数据可视化",
    "text": "数据可视化\n\nggplot 主题风格拓展：hrbrthemes"
  },
  {
    "objectID": "posts/hrbrthemes：最好用的ggplot主题扩展包/index.html",
    "href": "posts/hrbrthemes：最好用的ggplot主题扩展包/index.html",
    "title": "hrbrthemes：最好用的 ggplot 主题扩展包",
    "section": "",
    "text": "ggplot 好用归好用，但是默认主题给人的感觉还是过于呆板，一直想找一个比较美观的 ggplot 主题拓展包。\n恰好看到 Awesome ggplot2 有收集 ggplot 的主题拓展，遂逐一尝试了一下。\n经过筛选，发现只有 hrbrthemes 满足自己的要求：第一，风格简约，足够美观；第二，语法与 ggplot2 保持一致，符合使用习惯。"
  },
  {
    "objectID": "posts/hrbrthemes：最好用的ggplot主题扩展包/index.html#使用方法",
    "href": "posts/hrbrthemes：最好用的ggplot主题扩展包/index.html#使用方法",
    "title": "hrbrthemes：最好用的 ggplot 主题扩展包",
    "section": "使用方法",
    "text": "使用方法\n\n# 包引入\nlibrary(tidyverse)\nlibrary(hrbrthemes)\nlibrary(datasets)\nlibrary(patchwork) #控制多张图表的位置摆放\n\n使用 datasets package 内置的 airquality 数据集来做测试。\n\nknitr::kable(head(airquality))\n\n\n\n\nOzone\nSolar.R\nWind\nTemp\nMonth\nDay\n\n\n\n\n41\n190\n7.4\n67\n5\n1\n\n\n36\n118\n8.0\n72\n5\n2\n\n\n12\n149\n12.6\n74\n5\n3\n\n\n18\n313\n11.5\n62\n5\n4\n\n\nNA\nNA\n14.3\n56\n5\n5\n\n\n28\nNA\n14.9\n66\n5\n6\n\n\n\n\n\n\n内置主题函数\n\n# ggplot默认主题作图\nplot1 <- airquality %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point()\n\n# 使用hrbrthemes的默认主题作图\nplot2 <- airquality %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point() +\n  theme_ipsum()\n\n# 将两张图并列对比\nplot1 + plot2\n\n\n\n\n通过比较可以发现，theme_ipsum 将默认的背景色去掉了，并对横轴和纵轴的图例做了处理：将其字体变小，并将位置从中心处挪到边沿处。整体上变得更加简约和美观。\n使用 ?theme_ipsum 可以进一步看到该主题的内置参数，挑选几个比较重要的参数展示一下。\n1、grid 控制网格，默认是保留X轴和Y轴的网格，如需改变，可以直接使用 grid = '' 删除网格，或者使用 grid = 'X' 只保留X轴的网格。\n\nairquality %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point() +\n  theme_ipsum(grid = 'X')\n\n\n\n\n2、axis 控制横纵轴的起始轴线，默认是删除的，如果需要保留，使用方法和 grid 类似：\n\nairquality %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point() +\n  theme_ipsum(axis = 'XY')\n\n\n\n\n3、使用 base_family 控制字体。英文的主题风格，中文如果直接使用默认字体，效果一般不好。经过测试，苹果系统使用华文细黑 STXihei 字体的效果比较好。\n\nairquality %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point() +\n  labs(title = '散点图', x = '风速', y = '温度') +\n  theme_ipsum(base_family = 'STXihei')\n\n\n\n\n4、除了以上参数，theme_ipsum 主题函数还可以设置如下参数：标题 plot_title_、副标题 subtitle_、分面标题 strip_text_、注释 caption_、横纵坐标值 axis_title_等。\n5、除了 theme_ipsum，还有 theme_ipsum_es()、theme_tinyhand()、theme_ft_rc() 等主题风格。\n\nplot3 <- airquality %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point() +\n  labs(title = '散点图', x = '风速', y = '温度') +\n  theme_ft_rc(base_family = 'STXihei')\n\nplot4 <- airquality %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point() +\n  labs(title = '散点图', x = '风速', y = '温度') +\n  theme_ipsum_rc(base_family = 'STXihei')\n\nplot3 + plot4\n\n\n\n\n\n\n内置色彩系统\nhrbrthemes 也内置了色彩系统，方便直接调用。例如 scale_color_ipsum() 和 scale_color_ft()：\n\np5 <- airquality %>%\n  mutate(Month = as.factor(Month)) %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point(aes(color = Month)) +\n  scale_color_ipsum() +\n  theme_ipsum()\n\np6 <- airquality %>%\n  mutate(Month = as.factor(Month)) %>%\n  ggplot(aes(x = Wind, y = Temp)) +\n  geom_point(aes(color = Month)) +\n  scale_color_ft() +\n  theme_ipsum()\n\np5 + p6\n\n\n\n\n也可以使用 ipsum_pal() 和 ft_pal() 直接返回颜色编码字符串。\n\nscales::show_col(ipsum_pal()(9))\n\n\n\nscales::show_col(ft_pal()(9))"
  },
  {
    "objectID": "posts/hrbrthemes：最好用的ggplot主题扩展包/index.html#相关资源",
    "href": "posts/hrbrthemes：最好用的ggplot主题扩展包/index.html#相关资源",
    "title": "hrbrthemes：最好用的 ggplot 主题扩展包",
    "section": "相关资源",
    "text": "相关资源\n\nhrbrthemes Github page\nMan pages for hrbrthemes"
  },
  {
    "objectID": "posts/使用 waffle package 制作华夫饼图/index.html",
    "href": "posts/使用 waffle package 制作华夫饼图/index.html",
    "title": "使用 waffle package 制作华夫饼图",
    "section": "",
    "text": "今天制作的是华夫饼图，灵感参照自 bydata 的 #30DayChartChallenge。\n原始图片及使用 ggplot2 制图的最终效果如下：\n\n\n\n\n\n\n原始图片\n\n\n\n\n\n\n\n最终效果"
  },
  {
    "objectID": "posts/使用 waffle package 制作华夫饼图/index.html#包加载",
    "href": "posts/使用 waffle package 制作华夫饼图/index.html#包加载",
    "title": "使用 waffle package 制作华夫饼图",
    "section": "包加载",
    "text": "包加载\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(waffle)"
  },
  {
    "objectID": "posts/使用 waffle package 制作华夫饼图/index.html#导入数据",
    "href": "posts/使用 waffle package 制作华夫饼图/index.html#导入数据",
    "title": "使用 waffle package 制作华夫饼图",
    "section": "导入数据",
    "text": "导入数据\n\nraw_data <- read_xlsx(\"sdg_07_40_page_spreadsheet.xlsx\", sheet = 3, skip = 8, na = \":\") \n\n这里需要注意，原始数据中 missing data 使用 : 表示，因此需使用参数 na = \":\" 将 : 转换成 NA 。"
  },
  {
    "objectID": "posts/使用 waffle package 制作华夫饼图/index.html#数据清洗",
    "href": "posts/使用 waffle package 制作华夫饼图/index.html#数据清洗",
    "title": "使用 waffle package 制作华夫饼图",
    "section": "数据清洗",
    "text": "数据清洗\n\n# 对原始数据进行数据清洗\nclean_data <- raw_data %>%\n  # 过滤掉带有NA的行\n  drop_na() %>%\n  # 仅选择2020年的数据\n  select(Country = TIME, pct = `2020`) %>%\n  # 过滤掉国家名太长的国家（主要表示某个区域或者国家联盟）\n  filter(str_length(Country) <= 18) %>%\n  # 随机选择20个国家进行可视化\n  sample_n(20) %>%\n  mutate(pct = as.numeric(pct) %>% round(0)) %>%\n  # 按照比例从大到小排序\n  mutate(Country = fct_reorder(Country, -pct, sum)) %>%\n  mutate(reverse_pct = 100 - pct) %>%\n  pivot_longer(cols = pct:reverse_pct, names_to = 'type', values_to = 'value') %>%\n  mutate(value_pct = str_c(value, \"%\"))\n\n\nknitr::kable(head(clean_data))\n\n\n\n\nCountry\ntype\nvalue\nvalue_pct\n\n\n\n\nBulgaria\npct\n23\n23%\n\n\nBulgaria\nreverse_pct\n77\n77%\n\n\nLatvia\npct\n42\n42%\n\n\nLatvia\nreverse_pct\n58\n58%\n\n\nPoland\npct\n16\n16%\n\n\nPoland\nreverse_pct\n84\n84%"
  },
  {
    "objectID": "posts/使用 waffle package 制作华夫饼图/index.html#画图和调整",
    "href": "posts/使用 waffle package 制作华夫饼图/index.html#画图和调整",
    "title": "使用 waffle package 制作华夫饼图",
    "section": "画图和调整",
    "text": "画图和调整\n直接上代码：\n\nwaffle_plot <- clean_data %>%\n  ggplot(aes(fill = type, values = value)) +\n  geom_waffle(color = \"white\", size = 0.5, n_rows = 10) +\n  facet_wrap(~ Country, ncol= 5) +\n  # 横纵坐标轴的坐标和数值全部删除\n  scale_x_discrete(expand=c(0,0)) +\n  scale_y_discrete(expand=c(0,0)) +\n  guides(fill = 'none') +\n  # 横纵坐标比例相等，使得华夫饼图呈现为正方形\n  coord_equal() +\n  labs(\n    title = 'Share of renewable energy in gross final energy consumption (2020)',\n    caption = 'Source: European Environment Agency (EEA)'\n  ) +\n  theme(\n    strip.background = element_blank(),\n    # 分面标题加粗\n    strip.text = element_text(face = 'bold'))\n\n\n# 输出ggplot制图结果\nwaffle_plot\n\n\n\n\n经过 Figma 调整后的图片如下："
  },
  {
    "objectID": "posts/使用 waffle package 制作华夫饼图/index.html#注意事项",
    "href": "posts/使用 waffle package 制作华夫饼图/index.html#注意事项",
    "title": "使用 waffle package 制作华夫饼图",
    "section": "注意事项",
    "text": "注意事项\n如果遇到首次使用geom_waffle()函数报错，可以用如下方法解决：\n\nremotes::install_github(\"hrbrmstr/waffle\")\n关闭Rstudio后重新打开，问题解决\n解决方法来自https://github.com/hrbrmstr/waffle/issues/76"
  },
  {
    "objectID": "posts/使用 waffle package 制作华夫饼图/index.html#相关资源",
    "href": "posts/使用 waffle package 制作华夫饼图/index.html#相关资源",
    "title": "使用 waffle package 制作华夫饼图",
    "section": "相关资源",
    "text": "相关资源\n\nwaffle Github\nwaffle 官方文档\nR 使用 waffle 套件繪製鬆餅圖教學與範例"
  },
  {
    "objectID": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html",
    "href": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html",
    "title": "使用 ggalluvial 制作桑基图和凹凸图",
    "section": "",
    "text": "library(tidyverse)\nlibrary(ggalluvial)\nlibrary(hrbrthemes)\nlibrary(patchwork)"
  },
  {
    "objectID": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#数据准备",
    "href": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#数据准备",
    "title": "使用 ggalluvial 制作桑基图和凹凸图",
    "section": "数据准备",
    "text": "数据准备\n\n\n\n\nknitr::kable(head(city_data))\n\n\n\n\nfre_city_level\njob_city_level\ntotal\n\n\n\n\n一线城市\n一线城市\n58\n\n\n一线城市\n三线城市\n11\n\n\n一线城市\n二线城市\n17\n\n\n一线城市\n五线城市\n2\n\n\n一线城市\n四线城市\n3\n\n\n一线城市\n新一线城市\n56"
  },
  {
    "objectID": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#桑基图",
    "href": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#桑基图",
    "title": "使用 ggalluvial 制作桑基图和凹凸图",
    "section": "桑基图",
    "text": "桑基图\n先直接看个例子。\n\np1 <- city_data %>%\n  ggplot(aes(axis1 = fre_city_level, axis2 = job_city_level, y = total)) +\n  geom_alluvium(aes(fill = job_city_level)) +\n  geom_stratum() +\n  geom_text(stat = \"stratum\",\n            aes(label = after_stat(stratum)), family = 'STXihei') +\n  scale_x_discrete(expand = c(0,0), limits = c('投出简历次数', '接收简历次数')) +\n  scale_y_continuous(expand = c(0,0)) +\n  labs(x = '', y = '') +\n  guides(y = 'none', fill = 'none') +\n  theme_ipsum(base_family = \"STXihei\", grid = '') \n\np1\n\n\n\n\naxis 表示桑基图要流经的变量。例如现在我们要看不同线级城市之间的简历数量流动情况，则 axis1 = fre_city_level 表示简历从常驻线级城市流出；axis2 = job_city_level 表示流入到职位所在的线级城市。\ngeom_stratum() 是给流动变量做进一步分类，例如 fre_city_level 和 job_city_level 都被分为五个线级城市。另外，geom_text() 里 stat = \"stratum\" 和 label = after_stat(stratum) 是 ggalluvial 内置的固定用法，照着用即可。\ngeom_alluvium() 中，fill 参数控制的是流动线条的颜色。fill = job_city_level 表示我们以简历流入地为观察视角，看不同线级城市各流入了多少简历。这里也可以简历流出地为观察视角，只需要设置 fill = job_city_level 即可。\n\np2 <- city_data %>%\n  ggplot(aes(axis1 = fre_city_level, axis2 = job_city_level, y = total)) +\n  geom_alluvium(aes(fill = job_city_level), curve_type = \"linear\") +\n  geom_stratum() +\n  geom_text(stat = \"stratum\",\n            aes(label = after_stat(stratum)), family = 'STXihei') +\n  scale_x_discrete(expand = c(0,0), limits = c('投出简历次数', '接收简历次数')) +\n  scale_y_continuous(expand = c(0,0)) +\n  labs(x = '', y = '') +\n  guides(y = 'none', fill = 'none') +\n  theme_ipsum(base_family = \"STXihei\", grid = '') \n\np2\n\n\n\n\n基本用法之外，geom_alluvium() 函数还有一个 curve_type 参数，curve_type =  \"linear\" 表示线条使用直线。除了 linear，还有 cubic、cubic、quintic 等值，但是肉眼看不出太大区别。\n最后需要注意的是，制作桑基图时一般使用宽数据，操作如上所示。长数据也可，只是没有那么容易理解，这里不再演示。"
  },
  {
    "objectID": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#凹凸图",
    "href": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#凹凸图",
    "title": "使用 ggalluvial 制作桑基图和凹凸图",
    "section": "凹凸图",
    "text": "凹凸图\n在看文档的时候，意外发现 ggalluvial 不仅可以制作桑基图，还可以用来制作凹凸图。\n\n# 使用 alluvial package 内置的数据集 Refugees 做测试\ndata(Refugees, package = \"alluvial\")\n\nknitr::kable(head(Refugees))\n\n\n\n\ncountry\nyear\nrefugees\n\n\n\n\nAfghanistan\n2003\n2136043\n\n\nBurundi\n2003\n531637\n\n\nCongo DRC\n2003\n453465\n\n\nIraq\n2003\n368580\n\n\nMyanmar\n2003\n151384\n\n\nPalestine\n2003\n350568\n\n\n\n\n\n还是直接上个例子。\n\np3 <- Refugees %>%\n  ggplot(\n       aes(x = year, \n           y = refugees/10000, \n           alluvium = country)) +\n  geom_alluvium(aes(fill = country, colour = country), \n                alpha = .75, decreasing = FALSE) +  # decreasing一定要设置为FALSE\n  scale_x_continuous(breaks = seq(2003, 2013, 2)) +\n  theme_ipsum(grid = 'XY') +\n  scale_fill_brewer(type = \"qual\", palette = \"Set3\") +\n  scale_color_brewer(type = \"qual\", palette = \"Set3\") +\n  ggtitle(\"refugee volume by country and region of origin\")\n\np3\n\n\n\n\n上面的 x 轴是年份，y 轴是难民数量，alluvium 表示线条的类别，这里表示难民来自哪个国家。注意要把 geom_alluvium() 中的 decreasing 参数设置为 FALSE。\n另外 geom_alluvium 中的 width 参数表示不同年份变化中间的留白，width = 1 表示不需要任何留白，经试验，把值设置成 0.5 较为美观。\n\np4 <- Refugees %>%\n  ggplot(\n       aes(x = year, \n           y = refugees/10000, \n           alluvium = country)) +\n  geom_alluvium(aes(fill = country, colour = country),\n                alpha = .75, decreasing = FALSE,\n                width = 1) +  # decreasing一定要设置为FALSE\n  scale_x_continuous(breaks = seq(2003, 2013, 2)) +\n  theme_ipsum(grid = 'XY') +\n  scale_fill_brewer(type = \"qual\", palette = \"Set3\") +\n  scale_color_brewer(type = \"qual\", palette = \"Set3\") +\n  guides(fill = 'none', color = 'none') +\n  ggtitle(\"widht = 1\")\n\np5 <- Refugees %>%\n  ggplot(\n       aes(x = year, \n           y = refugees/10000, \n           alluvium = country)) +\n  geom_alluvium(aes(fill = country, colour = country),\n                alpha = .75, decreasing = FALSE,\n                width = 0.5) +  \n  scale_x_continuous(breaks = seq(2003, 2013, 2)) +\n  theme_ipsum(grid = 'XY') +\n  scale_fill_brewer(type = \"qual\", palette = \"Set3\") +\n  scale_color_brewer(type = \"qual\", palette = \"Set3\") +\n  guides(fill = 'none', color = 'none') +\n  ggtitle(\"width = 0.5\")\n\np4 + p5"
  },
  {
    "objectID": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#注意事项",
    "href": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#注意事项",
    "title": "使用 ggalluvial 制作桑基图和凹凸图",
    "section": "注意事项",
    "text": "注意事项\n\nstat_stratum()函数报错\n首次使用 stat_stratum() 函数为数据分类分层时，遇到报错： Computation failed in stat_stratum。\n在 ggalluvial 的 Github Issues 里找到了解决方法：将 dplyr 升级至 1.1.0 以后版本。\n\n\n流入地和流出地的分类类别不能完全一致\n在桑基图的例子中，流入地和流出地都是线级城市，分类类型完全一致，首次 run 的时候报错了。这里用了一个笨办法来解决：给标签重命名，即在X线城市前面加了个空格，在图表显示的时候看不出来。\n\ncity_data <- city_data %>%\n  mutate(fre_city_level = fct_relevel(fre_city_level, c(' 一线城市', ' 新一线城市', ' 二线城市', ' 三线城市', ' 四线城市', ' 五线城市')))"
  },
  {
    "objectID": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#相关资源",
    "href": "posts/使用 ggalluvial 制作桑基图和凹凸图/index.html#相关资源",
    "title": "使用 ggalluvial 制作桑基图和凹凸图",
    "section": "相关资源",
    "text": "相关资源\n\nggalluvial Github Page\nAlluvial Plots in ggplot2\nR Charts: Alluvial plot in ggplot2 with ggalluvial"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Boyce’s Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n使用 gghighlight 制图\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\n\n\n\n\n\n\n\n\n\nAug 6, 2023\n\n\nBoyce\n\n\n\n\n\n\n  \n\n\n\n\n使用 geom_ribbon 给双折线区间填充颜色\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\n\n\n\n\n\n\n\n\n\nAug 4, 2023\n\n\nBoyce\n\n\n\n\n\n\n  \n\n\n\n\n在 Github 上部署 Quarto 的静态网页\n\n\n\n\n\n\n\nGithub\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n\n\nMar 5, 2023\n\n\nBoyce\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n常用包和函数汇总\n\n\n\n\n\n\n\nR\n\n\n清单\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\nBoyce\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhrbrthemes：最好用的 ggplot 主题扩展包\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\n\n\n\n\n\n\n\n\n\nFeb 25, 2023\n\n\nBoyce\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n使用 ggalluvial 制作桑基图和凹凸图\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\n\n\n\n\n\n\n\n\n\nFeb 23, 2023\n\n\nBoyce\n\n\n\n\n\n\n  \n\n\n\n\n使用 waffle package 制作华夫饼图\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\n\n\n\n\n\n\n\n\n\nDec 7, 2022\n\n\nBoyce\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/在 Github 上部署 Quarto 的静态网页/index.html",
    "href": "posts/在 Github 上部署 Quarto 的静态网页/index.html",
    "title": "在 Github 上部署 Quarto 的静态网页",
    "section": "",
    "text": "简单记录一下，如何在 Github 上部署 Quarto 的静态网页。"
  },
  {
    "objectID": "posts/在 Github 上部署 Quarto 的静态网页/index.html#配置-quarto-项目文件夹并关联本地库和远程库",
    "href": "posts/在 Github 上部署 Quarto 的静态网页/index.html#配置-quarto-项目文件夹并关联本地库和远程库",
    "title": "在 Github 上部署 Quarto 的静态网页",
    "section": "配置 Quarto 项目文件夹，并关联本地库和远程库",
    "text": "配置 Quarto 项目文件夹，并关联本地库和远程库\n1、配置 Quarto 项目文件夹\n在 _quarto.yml 文件中写入 output-dir: docs，渲染后会生成 docs 目录，里面就是将要部署的静态网页。\n```{yaml}\nproject:\n  type: website\n  output-dir: docs\n```\n在主目录下使用 touch .nojekyll 新建 .nojekyll 文件，告诉 Github 在部署网页时，不要用默认的 Jekyll 处理网页。\n2、Quarto 的 Git 初始化\n在 Quarto 项目文件夹主目录下，使用 git init 进行 Git 初始化。\n新建 .gitignore 文件，在文件中写入 *.csv 和 *.xlsx，忽略数据源文件；再写入 _site/ 忽略本地调试时生成的文件。\n3、在 Github 新建项目库，并关联本地库和远程库\n使用下列命令关联本地库和远程库\n```{git}\ngit remote add origin git@github.com:whuhzx/QuartoBlog.git\ngit branch -M main\ngit push -u origin main\n```\n如果执行过程中返回 fatal: remote origin already exists. 的报错，则重新设置： git remote set-url origin git@github.com:whuhzx/QuartoBlog.git"
  },
  {
    "objectID": "posts/在 Github 上部署 Quarto 的静态网页/index.html#确保-github-和本机电脑已关联",
    "href": "posts/在 Github 上部署 Quarto 的静态网页/index.html#确保-github-和本机电脑已关联",
    "title": "在 Github 上部署 Quarto 的静态网页",
    "section": "确保 Github 和本机电脑已关联",
    "text": "确保 Github 和本机电脑已关联\n如果从未在电脑上使用过 Github，需首先将 Github 账号和本机电脑关联，具体方法是用终端创建 SSH 文件，并将公钥上传到 Github 配置页。具体步骤如下：\n\n确认本机是否已创建 SSH Key\n使用 ls -a ~ 在终端查看本机主目录页是否有 .ssh 目录。若没有，则使用 ssh-keygen -t rsa -C 'myemail@github.com' 创建 ssh 目录，并生成私钥文件 id_rsa 和 公钥文件 id_rsa.pub。\n之后使用 cat /.ssh/id_rsa.pub 查看公钥并复制。\n\n\n将公钥上传到 Github 配置页\n打开 Github，进入 Settings - SSH and GPG keys 页面（或者直接输入 https://github.com/settings/keys网址），点击 New SSH key，将之前复制的公钥粘贴进去。"
  },
  {
    "objectID": "posts/在 Github 上部署 Quarto 的静态网页/index.html#在本地配置-quarto-项目文件夹",
    "href": "posts/在 Github 上部署 Quarto 的静态网页/index.html#在本地配置-quarto-项目文件夹",
    "title": "在 Github 上部署 Quarto 的静态网页",
    "section": "在本地配置 Quarto 项目文件夹",
    "text": "在本地配置 Quarto 项目文件夹\n\n配置 Quarto 项目文件夹\n在 _quarto.yml 文件中写入 output-dir: docs，渲染后会生成 docs 目录，里面就是将要部署的静态网页。\n```{yaml}\nproject:\n  type: website\n  output-dir: docs\n```\n在主目录下使用 touch .nojekyll 新建 .nojekyll 的空文件，告诉 Github 在部署网页时，不要用默认的 Jekyll 处理和渲染网页。\n\n\nQuarto 的 Git 初始化\n在 Quarto 项目主目录下，使用 git init 进行 Git 初始化。\n新建 .gitignore 文件，在文件中写入 *.csv 和 *.xlsx，表示忽略数据源文件；再写入 _site/ 忽略本地调试时生成的文件。"
  },
  {
    "objectID": "posts/在 Github 上部署 Quarto 的静态网页/index.html#在-github-新建项目并关联本地库和远程库",
    "href": "posts/在 Github 上部署 Quarto 的静态网页/index.html#在-github-新建项目并关联本地库和远程库",
    "title": "在 Github 上部署 Quarto 的静态网页",
    "section": "在 Github 新建项目，并关联本地库和远程库",
    "text": "在 Github 新建项目，并关联本地库和远程库\n\n在 Github 新建项目\n在 Github 上新建名为 QuartoBlog 的项目，得到项目的 git 地址 git@github.com:whuhzx/QuartoBlog.git\n\n\n关联本地库和远程库\n使用下列命令关联本地库和远程库，并将本地博客内容推送到 Github 上：\n```{git}\ngit remote add origin git@github.com:whuhzx/QuartoBlog.git\ngit branch -M main\ngit push -u origin main\n```\n如果执行过程中返回 fatal: remote origin already exists. 的报错，则重新设置： git remote set-url origin git@github.com:whuhzx/QuartoBlog.git\n\n\n在 Github 上配置 docs 文件夹\n本地库和远程库关联成功后，在 Github 该项目的设置（Setting）页面，点击左侧 Page 按钮，将 Branch 下的文件夹改成 /docs，表示只渲染该文件夹下的文件。\n\n到这里，已可以在 https://whuhzx.github.io/QuartoBlog 页面上看到内容，静态网站已部署成功。"
  },
  {
    "objectID": "posts/在 Github 上部署 Quarto 的静态网页/index.html#相关资源",
    "href": "posts/在 Github 上部署 Quarto 的静态网页/index.html#相关资源",
    "title": "在 Github 上部署 Quarto 的静态网页",
    "section": "相关资源",
    "text": "相关资源\n\nYoutube: Publishing a Quarto website through GitHub Pages\nQuarto: GitHub Pages"
  },
  {
    "objectID": "posts/在 Github 上部署 Quarto 的静态网页/index.html#更新博客内容",
    "href": "posts/在 Github 上部署 Quarto 的静态网页/index.html#更新博客内容",
    "title": "在 Github 上部署 Quarto 的静态网页",
    "section": "更新博客内容",
    "text": "更新博客内容\n后续更新博客内容时，可使用下列 Git 常用命令：\n1、使用 git add 文件名/目录名 将工作区修改内容添加到缓存区\n2、使用 git status 查看工作区或缓存区状况\n3、使用 git commit -m \"文字说明\" 将缓存区的内容做成一个新的版本，可以在每次写完一篇新的博文内容后做一个新版本\n4、使用 git push -u origin main 将新版本推送到 Github 上"
  },
  {
    "objectID": "posts/使用 gghighlight 制图/index.html",
    "href": "posts/使用 gghighlight 制图/index.html",
    "title": "使用 gghighlight 制图",
    "section": "",
    "text": "library(tidyverse)\nlibrary(gghighlight)\nlibrary(hrbrthemes)"
  },
  {
    "objectID": "posts/使用 gghighlight 制图/index.html#数据准备和清洗",
    "href": "posts/使用 gghighlight 制图/index.html#数据准备和清洗",
    "title": "使用 gghighlight 制图",
    "section": "数据准备和清洗",
    "text": "数据准备和清洗\n先导入数据。\n\njisu_apps <- readxl::read_xlsx(\"QM数据.xlsx\", sheet = 3) \n\njisu_apps数据集中是不同极速版App的月活变化数据。\n\nknitr::kable(head(jisu_apps))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n时间\n快手极速版\n抖音极速版\n爱奇艺极速版\n喜马拉雅极速版\n好看视频极速版\n火山极速版\n美团极速版\nQQ极速版\n腾讯视频极速版\n\n\n\n\n2020-01-01\n10703.60\n9024.61\nNA\n89.47\nNA\n3387.60\nNA\n274.50\n537.34\n\n\n2020-02-01\n11374.78\n7565.89\nNA\n171.90\nNA\n2274.78\nNA\n351.04\n584.78\n\n\n2020-03-01\n11018.65\n6699.28\nNA\n165.85\nNA\n1487.27\nNA\n322.12\n425.26\n\n\n2020-04-01\n11237.10\n7222.69\nNA\n108.06\nNA\n1273.40\nNA\n287.80\n327.93\n\n\n2020-05-01\n11655.08\n7979.54\nNA\n92.20\nNA\n1350.78\nNA\n236.04\n290.39\n\n\n2020-06-01\n12118.11\n8839.93\nNA\n101.82\nNA\n2139.89\nNA\n219.02\n254.15\n\n\n\n\n\n绘图需使用长数据，我们先将宽数据转换为长数据。\n\njisu_apps_long <- jisu_apps %>%\n  pivot_longer(cols = 2:10, names_to = \"应用\", values_to = \"月活\")\n\n\nknitr::kable(head(jisu_apps_long))\n\n\n\n\n时间\n应用\n月活\n\n\n\n\n2020-01-01\n快手极速版\n10703.60\n\n\n2020-01-01\n抖音极速版\n9024.61\n\n\n2020-01-01\n爱奇艺极速版\nNA\n\n\n2020-01-01\n喜马拉雅极速版\n89.47\n\n\n2020-01-01\n好看视频极速版\nNA\n\n\n2020-01-01\n火山极速版\n3387.60"
  },
  {
    "objectID": "posts/使用 gghighlight 制图/index.html#使用-gghighlight-制图",
    "href": "posts/使用 gghighlight 制图/index.html#使用-gghighlight-制图",
    "title": "使用 gghighlight 制图",
    "section": "使用 gghighlight 制图",
    "text": "使用 gghighlight 制图\n其实整个pacakge里主要使用的就是gghighlight()函数。\n先看没有高亮任一线条的样子。\n\njisu_apps_long %>%\n  ggplot(aes(x = 时间, y = 月活)) +\n  geom_line(aes(group = 应用, color = 应用)) +\n  theme_ipsum(base_family = \"PingFang SC\")\n\n\n\n\n再来高亮指定名称的线条。其中label_params主要用来调整高亮线条的名称样式，参数和geom_label_repel一致。\n\njisu_apps_long %>%\n  ggplot(aes(x = 时间, y = 月活)) +\n  geom_line(aes(group = 应用, color = 应用)) +\n  gghighlight(应用 == '快手极速版', label_params = list(family = \"PingFang SC\")) +\n  theme_ipsum(base_family = \"PingFang SC\")\n\n\n\n\n线条名称可以改用图例的形式，而不直接在线条结尾处展现标签。这里需使用use_direct_label参数。\n\njisu_apps_long %>%\n  ggplot(aes(x = 时间, y = 月活)) +\n  geom_line(aes(group = 应用, color = 应用)) +\n  gghighlight(应用 == '快手极速版', use_direct_label = FALSE) +\n  theme_ipsum(base_family = \"PingFang SC\")\n\n\n\n\n还可以使用函数筛选需要高亮的线条。例如通过max(月活) > 10000筛选出月活过亿的应用。\n\njisu_apps_long %>%\n  ggplot(aes(x = 时间, y = 月活)) +\n  geom_line(aes(group = 应用, color = 应用)) +\n  gghighlight(max(月活) > 10000, use_direct_label = FALSE) +\n  theme_ipsum(base_family = \"PingFang SC\")\n\n\n\n\n结合max_highlight参数，指定高亮的最大线条数。\n\njisu_apps_long %>%\n  ggplot(aes(x = 时间, y = 月活)) +\n  geom_line(aes(group = 应用, color = 应用)) +\n  gghighlight(max(月活, na.rm = TRUE), max_highlight = 3, use_direct_label = FALSE) +\n  theme_ipsum(base_family = \"PingFang SC\")\n\n\n\n\n如果有更细粒度的需求，例如2023年月活最高的三个应用，则无法通过gghighlight()内置参数直接实现，需要先计算得到这三个应用的名称。\n\ntop3_app_names <- jisu_apps_long %>%\n  filter(lubridate::year(时间) == 2023) %>%\n  group_by(应用) %>%\n  top_n(1, 月活) %>%\n  ungroup() %>%\n  arrange(desc(月活)) %>%\n  top_n(3, 月活) %>%\n  pull(应用)\n\n# 也可使用行计算，结果和上面一样\n# top3_app_names2 <- jisu_apps_long %>%\n#   filter(lubridate::year(时间) == 2023) %>%\n#   pivot_wider(names_from = 时间, values_from = 月活) %>%\n#   rowwise() %>%\n#   mutate(最大月活 = max(across(where(is.numeric)))) %>%\n#   ungroup() %>%\n#   top_n(3, 最大月活) %>%\n#   pull(应用)\n  \njisu_apps_long %>%\n  ggplot(aes(x = 时间, y = 月活)) +\n  geom_line(aes(group = 应用, color = 应用)) +\n  gghighlight(应用 %in% top3_app_names, use_direct_label = FALSE) +\n  theme_ipsum(base_family = \"PingFang SC\")\n\n\n\n\n最后按应用进行分面。\n\njisu_apps_long %>%\n  mutate(应用 = fct_reorder(应用, -月活, mean, na.rm = TRUE)) %>%\n  ggplot(aes(x = 时间, y = 月活)) +\n  geom_line(aes(group = 应用, color = 应用), size = 0.7) +\n  # 为了看清趋势采用对数坐标轴\n  scale_y_log10() +\n  theme_ipsum(base_family = \"PingFang SC\", grid = \"XY\") +\n  gghighlight(use_direct_label = FALSE) +\n  facet_wrap(~应用) +\n  guides(color = FALSE) +\n  labs(y = \"月活（万人）\")"
  },
  {
    "objectID": "posts/使用 gghighlight 制图/index.html#参考资料",
    "href": "posts/使用 gghighlight 制图/index.html#参考资料",
    "title": "使用 gghighlight 制图",
    "section": "参考资料",
    "text": "参考资料\n\nIntroduction to gghighlight\nLine chart with small multiple"
  },
  {
    "objectID": "posts/使用 geom_ribbon 为折线差值填充颜色/index.html",
    "href": "posts/使用 geom_ribbon 为折线差值填充颜色/index.html",
    "title": "使用 geom_ribbon 给双折线区间填充颜色",
    "section": "",
    "text": "平常看数据图表时，经常见到这么一种图表类型——一张图里有两条折线A和B，当A大于B时，AB空间里填充一种颜色；当B大于A时，AB空间里填充另一种颜色。\n例如《华盛顿邮报》制作的这张图：\n\n探索了一下，发现可以借助geom_ribbon函数实现类似功能。"
  },
  {
    "objectID": "posts/使用 geom_ribbon 为折线差值填充颜色/index.html#包引入",
    "href": "posts/使用 geom_ribbon 为折线差值填充颜色/index.html#包引入",
    "title": "使用 geom_ribbon 给双折线区间填充颜色",
    "section": "包引入",
    "text": "包引入\n\nlibrary(tidyverse)\nlibrary(hrbrthemes)\nlibrary(patchwork)"
  },
  {
    "objectID": "posts/使用 geom_ribbon 为折线差值填充颜色/index.html#数据准备和清洗",
    "href": "posts/使用 geom_ribbon 为折线差值填充颜色/index.html#数据准备和清洗",
    "title": "使用 geom_ribbon 给双折线区间填充颜色",
    "section": "数据准备和清洗",
    "text": "数据准备和清洗\n先导入数据。\n\napps_mau <- readxl::read_xlsx(\"QM数据.xlsx\", sheet = 1)\n\napps_mau数据集里面有快手、百度等移动应用的财报月活数据和QM监测到的月活数据。\n\nknitr::kable(head(apps_mau))\n\n\n\n\n时间\n财报数据\nQM数据\n应用名\n\n\n\n\n2020Q1\n4.95\n5.15\n快手（主站+极速版）\n\n\n2020Q2\n4.74\n4.97\n快手（主站+极速版）\n\n\n2020Q3\n4.79\n5.05\n快手（主站+极速版）\n\n\n2020Q4\n4.76\n5.22\n快手（主站+极速版）\n\n\n2021Q1\n5.20\n5.71\n快手（主站+极速版）\n\n\n2021Q2\n5.06\n5.26\n快手（主站+极速版）\n\n\n\n\n\n现在要做的是：当QM监测数据高于该应用的财报数据时，采用一种颜色填充；当QM监测数据低于财报数据时，采用另外一种颜色填充。\n对数据进行简单地清洗。\n\napps_mau_clean <- apps_mau %>%\n  # 把数据类型从字符串转换成时间，geom_ribbon的参数需要是数值型变量\n  mutate(时间 = zoo::as.yearqtr(时间)) %>%\n  # 因子排序，后续做分面图时按照月活差距排序\n  mutate(应用名 = fct_reorder(应用名, 财报数据 - QM数据, mean))\n\n\nknitr::kable(head(apps_mau_clean))\n\n\n\n\n时间\n财报数据\nQM数据\n应用名\n\n\n\n\n2020 Q1\n4.95\n5.15\n快手（主站+极速版）\n\n\n2020 Q2\n4.74\n4.97\n快手（主站+极速版）\n\n\n2020 Q3\n4.79\n5.05\n快手（主站+极速版）\n\n\n2020 Q4\n4.76\n5.22\n快手（主站+极速版）\n\n\n2021 Q1\n5.20\n5.71\n快手（主站+极速版）\n\n\n2021 Q2\n5.06\n5.26\n快手（主站+极速版）\n\n\n\n\n\n后续作图时， 由于geom_ribbon 使用宽数据，geom_line使用长数据，因此此处需做一个数据类型的转换。\n\napps_mau_longdata <- apps_mau_clean %>%\n  # 看QM数据相较于财报数据偏离比例有多少\n  mutate(diff = (QM数据 - 财报数据) / 财报数据,\n         diff_format = str_c(round(diff,2) * 100, \"%\")) %>%\n  pivot_longer(cols = c('财报数据', 'QM数据'),\n               names_to = '数据来源',\n               values_to = '月活') \n\n再来看看转换后的数据。\n\nknitr::kable(head(apps_mau_longdata))\n\n\n\n\n时间\n应用名\ndiff\ndiff_format\n数据来源\n月活\n\n\n\n\n2020 Q1\n快手（主站+极速版）\n0.0404040\n4%\n财报数据\n4.95\n\n\n2020 Q1\n快手（主站+极速版）\n0.0404040\n4%\nQM数据\n5.15\n\n\n2020 Q2\n快手（主站+极速版）\n0.0485232\n5%\n财报数据\n4.74\n\n\n2020 Q2\n快手（主站+极速版）\n0.0485232\n5%\nQM数据\n4.97\n\n\n2020 Q3\n快手（主站+极速版）\n0.0542797\n5%\n财报数据\n4.79\n\n\n2020 Q3\n快手（主站+极速版）\n0.0542797\n5%\nQM数据\n5.05"
  },
  {
    "objectID": "posts/使用 geom_ribbon 为折线差值填充颜色/index.html#绘图",
    "href": "posts/使用 geom_ribbon 为折线差值填充颜色/index.html#绘图",
    "title": "使用 geom_ribbon 给双折线区间填充颜色",
    "section": "绘图",
    "text": "绘图\n绘图时会用到三个geom图形函数：geom_line用来绘制折线，geom_text用来绘制QM数据相较于财报数据的偏离值，而geom_ribbon用于给折线差值空间填充颜色。\n其中geom_ribbon的主要aes()参数是x、y、xmin、ymin、xmax、ymax，表示绘图空间的起始及结束坐标。另外，fill表示填充的颜色，alpha表示透明度。\n\napps_plot <- apps_mau_longdata %>%\n  # x = 时间的数据类型需是泛date类型,否则无效\n  ggplot(aes(x = 时间)) +\n  # 分组折线图\n  geom_line(aes(y = 月活, group = 数据来源, color = 数据来源)) +\n  # 标注出偏离比例\n  geom_text(data = apps_mau_longdata %>% filter(数据来源 == 'QM数据'),\n            aes(y = 月活, label = diff_format)) +\n  # 折线差值部分填充颜色\n  geom_ribbon(\n    data = apps_mau_clean %>% mutate(颜色 = ifelse(财报数据>QM数据, '财报数据', 'QM数据')),\n    mapping = aes(\n      # pmin和pmax函数表示在一组向量中分别取最小和最大值\n      ymin = pmin(财报数据, QM数据),\n      ymax = pmax(财报数据, QM数据),\n      fill = 颜色),\n    alpha = 0.3\n  ) +\n  facet_wrap(~ 应用名, ncol = 2) +\n  scale_x_continuous(\n    # 横轴标签只出现7个\n    breaks = scales::pretty_breaks(n = 7),\n    # 横纵标签默认为'2020-01的格式，将其格式化为2020Q1'\n    labels = function(x) format(zoo::as.yearqtr(x), \"%YQ%q\")) +\n  guides(fill = 'none') +\n  theme_ipsum(base_family = 'PingFang SC', grid = 'XY')\n\n\n需要注意的是，使用goem_ribbon有一个缺点：当两条折线交叉的时候，交叉点附近区域无法被正确填色（仔细看的话会发现，快手分面图中两线交汇的地方是空白的）。\n这是由于geom_ribbon的工作原理所导致的：geom_ribbon会以y轴的值作为区域的边界，所以当两条线交叉时，那一点的y值是不确定的，所以ggplot2不会在那个位置上色。\n针对这点，暂时没有发现特别好的解决方法。只能等生成svg图形后，在Figma里手动调整。"
  },
  {
    "objectID": "posts/使用 geom_ribbon 为折线差值填充颜色/index.html#注意事项",
    "href": "posts/使用 geom_ribbon 为折线差值填充颜色/index.html#注意事项",
    "title": "使用 geom_ribbon 给双折线区间填充颜色",
    "section": "注意事项",
    "text": "注意事项\n1、数据结构方面。goem_line使用的是长数据，而goem_ribbon使用的是宽数据。将它们同时绘制在一张图里的时候，需要做数据转换，不能使用同一个数据集。\n2、数据类型方面。使用geom_ribbon绘图时，x轴和y轴都必须是数值型变量或者时间变量，数据类型不对的话虽不会报错，但也无法绘制出任何结果。这里debug了好久才发现问题，最后使用zoo pacakge的as.yearqtr函数将时间（2020Q1）由字符串格式转换成时间格式。"
  }
]