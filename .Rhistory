airquality %>%
ggplot(aes(x = Wind, y = Temp)) +
geom_point(aes(fill = Month)) +
theme_ft_rc()
airquality %>%
ggplot(aes(x = Wind, y = Temp)) +
geom_point(aes(fill = Month)) +
theme_ipsum()
airquality %>%
mutate(Month = as.factor(Month)) %>%
ggplot(aes(x = Wind, y = Temp)) +
geom_point(aes(fill = Month)) +
theme_ipsum()
airquality %>%
mutate(Month = as.factor(Month)) %>%
ggplot(aes(x = Wind, y = Temp)) +
geom_point(aes(color = Month)) +
theme_ipsum()
airquality %>%
mutate(Month = as.factor(Month)) %>%
ggplot(aes(x = Wind, y = Temp)) +
geom_point(aes(color = Month)) +
scale_fill_brewer() +
theme_ipsum()
airquality %>%
mutate(Month = as.factor(Month)) %>%
ggplot(aes(x = Wind, y = Temp)) +
geom_point(aes(color = Month)) +
scale_fill_brewer()
airquality %>%
mutate(Month = as.factor(Month)) %>%
ggplot(aes(x = Wind, y = Temp)) +
geom_point(aes(color = Month)) +
scale_fill_brewer() +
theme_ipsum()
?scale_fill_brewer
airquality %>%
mutate(Month = as.factor(Month)) %>%
ggplot(aes(x = Wind, y = Temp)) +
geom_point(aes(color = Month)) +
scale_color_brewer() +
theme_ipsum()
hrbrthemes::ipsum(n = 3)
hrbrthemes::ipsum(n = 3)
hrbrthemes::ipsum(n = 3, what = "sentences")
airquality %>%
mutate(Month = as.factor(Month)) %>%
ggplot(aes(x = Wind, y = Temp)) +
geom_point(aes(color = Month)) +
scale_color_ipsum() +
theme_ipsum()
airquality %>%
mutate(Month = as.factor(Month)) %>%
ggplot(aes(x = Wind, y = Temp)) +
geom_point(aes(color = Month)) +
scale_color_ft() +
theme_ipsum()
p5 <- airquality %>%
mutate(Month = as.factor(Month)) %>%
ggplot(aes(x = Wind, y = Temp)) +
geom_point(aes(color = Month)) +
scale_color_ipsum() +
theme_ipsum()
p5 + p6
p6 <- airquality %>%
mutate(Month = as.factor(Month)) %>%
ggplot(aes(x = Wind, y = Temp)) +
geom_point(aes(color = Month)) +
scale_color_ft() +
theme_ipsum()
p5 + p6
?ipsum_pal
scales::show_col(ipsum_pal()(9))
ipsum_pal()
ipsum_pal()(3)
ipsum_pal()(10)
p7 <- scales::show_col(ipsum_pal()(9))
p8 <- scales::show_col(ft_cols()(9))
?ft_cols
ft_cols()(8)
ft_cols(8)
ft_cols
ft_cols[1]
ft_cols$blue
p8 <- scales::show_col(ft_pal()(9))
p8 <- scales::show_col(ft_pal()(9))
p7 + p8
p7 + p8
p7 <- scales::show_col(ipsum_pal()(9))
p8 <- scales::show_col(ft_pal()(9))
?airquality
library(tidyverse)
library(ggalluvial)
library(hrbrthemes)
library(patchwork)
#| echo: false
city_data <- tribble(
~fre_city_level, ~job_city_level, ~total,
" 一线城市",         "一线城市",          58,
" 一线城市",         "三线城市",          11,
" 一线城市",         "二线城市",          17,
" 一线城市",         "五线城市",          2,
" 一线城市",         "四线城市",          3,
" 一线城市",         "新一线城市",         56,
" 三线城市",         "一线城市",          126,
" 三线城市",         "三线城市",          153,
" 三线城市",         "二线城市",          106,
" 三线城市",         "五线城市",          16,
" 三线城市",         "四线城市",          24,
" 三线城市",         "新一线城市",         302,
" 二线城市",         "一线城市",          78,
" 二线城市",         "三线城市",          53,
" 二线城市",         "二线城市",          148,
" 二线城市",         "五线城市",          11,
" 二线城市",         "四线城市",          14,
" 二线城市",         "新一线城市",         203,
" 五线城市",         "一线城市",          127,
" 五线城市",         "三线城市",          96,
" 五线城市",         "二线城市",          136,
" 五线城市",         "五线城市",          61,
" 五线城市",         "四线城市",          31,
" 五线城市",         "新一线城市",         351,
" 四线城市",         "一线城市",          129,
" 四线城市",         "三线城市",          85,
" 四线城市",         "二线城市",          116,
" 四线城市",         "五线城市",          16,
" 四线城市",         "四线城市",          55,
" 四线城市",         "新一线城市",         319,
" 新一线城市",        "一线城市",          66,
" 新一线城市",        "三线城市",          40,
" 新一线城市",        "二线城市",          56,
" 新一线城市",        "五线城市",          7,
" 新一线城市",        "四线城市",          12,
" 新一线城市",        "新一线城市",        281) %>%
# 线级城市的因子标签重新排序
mutate(fre_city_level = fct_relevel(fre_city_level, c(' 一线城市', ' 新一线城市', ' 二线城市', ' 三线城市', ' 四线城市', ' 五线城市'))) %>%
mutate(job_city_level = fct_relevel(job_city_level, c('一线城市', '新一线城市', '二线城市', '三线城市', '四线城市', '五线城市')))
knitr::kable(head(city_data))
p1 <- city_data %>%
ggplot(aes(axis1 = fre_city_level, axis2 = job_city_level, y = total)) +
geom_alluvium(aes(fill = job_city_level)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum)), family = 'STXihei') +
scale_x_discrete(expand = c(0,0), limits = c('投出简历次数', '接收简历次数')) +
scale_y_continuous(expand = c(0,0)) +
labs(x = '', y = '') +
guides(y = 'none', fill = 'none') +
theme_ipsum(base_family = "STXihei", grid = '')
p1 <- city_data %>%
ggplot(aes(axis1 = fre_city_level, axis2 = job_city_level, y = total)) +
geom_alluvium(aes(fill = job_city_level)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum)), family = 'STXihei') +
scale_x_discrete(expand = c(0,0), limits = c('投出简历次数', '接收简历次数')) +
scale_y_continuous(expand = c(0,0)) +
labs(x = '', y = '') +
guides(y = 'none', fill = 'none') +
theme_ipsum(base_family = "STXihei", grid = '')
p1
p2 <- city_data %>%
ggplot(aes(axis1 = fre_city_level, axis2 = job_city_level, y = total)) +
geom_alluvium(aes(fill = job_city_level), curve_type = "linear") +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum)), family = 'STXihei') +
scale_x_discrete(expand = c(0,0), limits = c('投出简历次数', '接收简历次数')) +
scale_y_continuous(expand = c(0,0)) +
labs(x = '', y = '') +
guides(y = 'none', fill = 'none') +
theme_ipsum(base_family = "STXihei", grid = '')
p2
# 使用 alluvial package 内置的数据集 Refugees 做测试
data(Refugees, package = "alluvial")
install.packages("alluvial")
p3 <- Refugees %>%
ggplot(
aes(x = year,
y = refugees/10000,
alluvium = country)) +
geom_alluvium(aes(fill = country, colour = country),
alpha = .75, decreasing = FALSE) +  # decreasing一定要设置为FALSE
scale_x_continuous(breaks = seq(2003, 2013, 2)) +
theme_ipsum(grid = 'XY') +
scale_fill_brewer(type = "qual", palette = "Set3") +
scale_color_brewer(type = "qual", palette = "Set3") +
ggtitle("refugee volume by country and region of origin")
p3
# 使用 alluvial package 内置的数据集 Refugees 做测试
data(Refugees, package = "alluvial")
knitr::kable(head(Refugees))
p3 <- Refugees %>%
ggplot(
aes(x = year,
y = refugees/10000,
alluvium = country)) +
geom_alluvium(aes(fill = country, colour = country),
alpha = .75, decreasing = FALSE) +  # decreasing一定要设置为FALSE
scale_x_continuous(breaks = seq(2003, 2013, 2)) +
theme_ipsum(grid = 'XY') +
scale_fill_brewer(type = "qual", palette = "Set3") +
scale_color_brewer(type = "qual", palette = "Set3") +
ggtitle("refugee volume by country and region of origin")
p3
p4 <- Refugees %>%
ggplot(
aes(x = year,
y = refugees/10000,
alluvium = country)) +
geom_alluvium(aes(fill = country, colour = country),
alpha = .75, decreasing = FALSE,
width = 1) +  # decreasing一定要设置为FALSE
scale_x_continuous(breaks = seq(2003, 2013, 2)) +
theme_ipsum(grid = 'XY') +
scale_fill_brewer(type = "qual", palette = "Set3") +
scale_color_brewer(type = "qual", palette = "Set3") +
guides(fill = 'none', color = 'none') +
ggtitle("widht = 1")
p5 <- Refugees %>%
ggplot(
aes(x = year,
y = refugees/10000,
alluvium = country)) +
geom_alluvium(aes(fill = country, colour = country),
alpha = .75, decreasing = FALSE,
width = 0.5) +
scale_x_continuous(breaks = seq(2003, 2013, 2)) +
theme_ipsum(grid = 'XY') +
scale_fill_brewer(type = "qual", palette = "Set3") +
scale_color_brewer(type = "qual", palette = "Set3") +
guides(fill = 'none', color = 'none') +
ggtitle("width = 0.5")
p4 + p5
install.packages("janitor")
library(janitor)
install.packages("gghighlight")
library(tidyverse)
library(gghighlight)
library(hrbrthemes)
jisu_apps <- readxl::read_xlsx("QM数据.xlsx", sheet = 3)
knitr::kable(head(jisu_apps))
jisu_apps_long <- jisu_apps %>%
pivot_longer(cols = 2:10, names_to = "应用", values_to = "月活")
knitr::kable(head(jisu_apps_long))
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(应用 == '快手极速版', label_params = list(family = "PingFang SC")) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(应用 == '快手极速版', use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000, use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活, na.rm = TRUE), max_highlight = 3, use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000 || 应用 == 'QQ极速版', use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用))
jisu_apps_long
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000 || 应用 == 'QQ极速版', use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用))
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000, use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000 || 应用 == 'QQ极速版', use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000 || (应用 == 'QQ极速版'), use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(应用 == 'QQ极速版', use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000 | 应用 == 'QQ极速版', use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight((max(月活) > 10000) || (应用 == 'QQ极速版'), use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
top3_app_names <- jisu_apps_long %>%
filter(lubridate::year(时间) == 2023) %>%
group_by(应用) %>%
top_n(1, 月活) %>%
ungroup() %>%
arrange(desc(月活)) %>%
top_n(3, 月活) %>%
pull(应用)
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(应用 %in% top3_app_names, use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
mutate(应用 = fct_reorder(应用, -月活, mean, na.rm = TRUE)) %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用), size = 0.7) +
# 为了看清趋势采用对数坐标轴
scale_y_log10() +
theme_ipsum(base_family = "PingFang SC", grid = "XY") +
gghighlight(use_direct_label = FALSE) +
facet_wrap(~应用) +
guides(color = FALSE) +
labs(y = "月活（万人）")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000 || 应用 == 'QQ极速版', use_direct_label = FALSE)
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000 | 应用 == 'QQ极速版', use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000 || 应用 == 'QQ极速版', use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000 | 应用 == 'QQ极速版', use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活, na.rm = TRUE) > 10000 | 应用 == 'QQ极速版', use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活, na.rm = TRUE) > 10000 | 应用 == 'QQ极速版', use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000 | 应用 == 'QQ极速版', use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000, use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000 | 应用 = 'QQ极速版', use_direct_label = FALSE) +
jisu_apps_long %>%
ggplot(aes(x = 时间, y = 月活)) +
geom_line(aes(group = 应用, color = 应用)) +
gghighlight(max(月活) > 10000 | 应用 == 'QQ极速版', use_direct_label = FALSE) +
theme_ipsum(base_family = "PingFang SC")
library(tidyverse)
library(nycflights13)
install.packages(nycflights13)
library(tidyverse)
install.packages("nycflights13")
library(tidyverse)
library(nycflights13)
library(scales)
library(ggridges)
install.packages("ggridges")
library(tidyverse)
library(nycflights13)
library(scales)
library(ggridges)
head(flights)
knitr::kable(head(flights))
# 查看航空公司
DT::datatable(flights %>% count(carrier, sort = TRUE))
DT::datatable(head(flights))
# 查看航班起飞机场
DT::datatable(flights %>% count(origin, sort = TRUE))
# 得到执飞次数最多的十家公司
top10Carrier <- flights %>%
count(carrier, sort = TRUE) %>%
top_n(10, n)
# 用semi_join()从flights_sample中过滤出这十家航空公司的数据
flights_sample <- flights %>%
semi_join(top10Carrier, by = "carrier") %>%
# 将carrier从字符串变成因子，方便后续分析
mutate(carrier = as.factor(carrier))
# 用semi_join()过滤出这十家航空公司的数据
flights_sample <- flights %>%
semi_join(top10Carrier, by = "carrier") %>%
# 将carrier从字符串变成因子，方便后续分析
mutate(carrier = as.factor(carrier))
JFK_flights <- flights_sample %>%
filter(origin == "JFK") %>%
count(carrier, sort = TRUE) %>%
top_n(5, n)
JFK_flights %>%
ggplot(aes(x = carrier, y = n)) +
geom_bar(aes(fill = carrier), stat = "identity") +
guides(fill = FALSE) +
theme_minimal()
LGA_flights <- flights_sample %>%
filter(origin == "LGA") %>%
count(carrier, sort = TRUE) %>%
top_n(5, n)
LGA_flights %>%
ggplot(aes(x = carrier, y = n)) +
geom_bar(aes(fill = carrier), stat = "identity") +
guides(fill = FALSE) +
theme_minimal()
# 使用scale::hue_pal()(n)可以生成一组系统的默认颜色向量
hue_pal()(5)
# 使用scale::show_col()函数能够将颜色以视觉化的方式呈现
show_col(hue_pal()(5), borders = NA)
# 得到 JFK_flights factor 的 levels
JFK_flights_levels <- levels(JFK_flights$carrier %>% droplevels())
JFK_flights_levels
# 得到 LGAflights factor 的 levels
LGA_flights_levels <- levels(LGA_flights$carrier %>% droplevels())
LGA_flights_levels
# ggplot2 自动生成的五种颜色
hue_colors <- hue_pal()(5)
# 使用表格看到两者意义对应的关系
tibble(hue_colors = hue_colors,
figure1 = JFK_flights_levels,
figure2 = LGA_flights_levels) %>%
DT::datatable()
LGA_flights %>%
mutate(carrier = fct_reorder(carrier, -n)) %>%
pull(carrier) %>%
droplevels()
LGA_flights %>%
mutate(carrier = fct_reorder(carrier, -n)) %>%
ggplot(aes(x = carrier, y = n)) +
geom_bar(aes(fill = carrier), stat = "identity") +
guides(fill = FALSE) +
theme_minimal()
# 从调色板中自动生成nlevels个颜色，命名为 carrier_colors
# nlevel()返回因子的levels数量
carrier_colors <- hue_pal()(nlevels(flights_sample$carrier))
carrier_colors
# 将 carrier_colors 视觉化
show_col(carrier_colors, borders = NA)
# 用names()给carrier_colors加上名字，名字就是因子的levels
names(carrier_colors) <- levels(flights_sample$carrier)
carrier_colors
JFK_flights %>%
ggplot(aes(x = carrier, y = n)) +
geom_bar(aes(fill = carrier), stat = "identity") +
scale_fill_manual(name = "carrier", values = carrier_colors) +
guides(fill = FALSE) +
theme_minimal()
LGA_flights %>%
ggplot(aes(x = carrier, y = n)) +
geom_bar(aes(fill = carrier), stat = "identity") +
scale_fill_manual(values = carrier_colors) +
guides(fill = FALSE) +
theme_minimal()
flights_sample %>%
mutate(carrier = fct_reorder(carrier, -distance, median)) %>%
ggplot(aes(x = distance, y = carrier)) +
geom_density_ridges(aes(fill = carrier), alpha = 0.7) +
scale_fill_manual(values = carrier_colors) +
guides(fill = FALSE) +
theme_minimal()
knitr::kable(head(flights))
# 查看航空公司
knitr::kable(flights %>% count(carrier, sort = TRUE))
# 查看航班起飞机场
knitr::kable(flights %>% count(origin, sort = TRUE))
# 使用表格看到两者意义对应的关系
tibble(hue_colors = hue_colors,
figure1 = JFK_flights_levels,
figure2 = LGA_flights_levels) %>%
knitr::kable
# 使用表格看到两者意义对应的关系
tibble(hue_colors = hue_colors,
figure1 = JFK_flights_levels,
figure2 = LGA_flights_levels) %>%
knitr::kable()
