{"title":"使用 ggalluvial 制作桑基图和凹凸图","markdown":{"yaml":{"title":"使用 ggalluvial 制作桑基图和凹凸图","date":"2023/02/23","categories":["R","ggplot2"]},"headingText":"包引入","containsRefs":false,"markdown":"\n\n\n\n```{r}\n#| warning: false \nlibrary(tidyverse)\nlibrary(ggalluvial)\nlibrary(hrbrthemes)\nlibrary(patchwork)\n```\n\n\n## 数据准备\n\n```{r}\n#| echo: false\ncity_data <- tribble(\n  ~fre_city_level, ~job_city_level, ~total, \n   \" 一线城市\",         \"一线城市\",          58,    \n   \" 一线城市\",         \"三线城市\",          11,    \n   \" 一线城市\",         \"二线城市\",          17,    \n   \" 一线城市\",         \"五线城市\",          2,     \n   \" 一线城市\",         \"四线城市\",          3,     \n   \" 一线城市\",         \"新一线城市\",         56,    \n   \" 三线城市\",         \"一线城市\",          126,   \n   \" 三线城市\",         \"三线城市\",          153,   \n   \" 三线城市\",         \"二线城市\",          106,   \n   \" 三线城市\",         \"五线城市\",          16,    \n   \" 三线城市\",         \"四线城市\",          24,    \n   \" 三线城市\",         \"新一线城市\",         302,   \n   \" 二线城市\",         \"一线城市\",          78,    \n   \" 二线城市\",         \"三线城市\",          53,    \n   \" 二线城市\",         \"二线城市\",          148,   \n   \" 二线城市\",         \"五线城市\",          11,    \n   \" 二线城市\",         \"四线城市\",          14,    \n   \" 二线城市\",         \"新一线城市\",         203,   \n   \" 五线城市\",         \"一线城市\",          127,   \n   \" 五线城市\",         \"三线城市\",          96,    \n   \" 五线城市\",         \"二线城市\",          136,   \n   \" 五线城市\",         \"五线城市\",          61,    \n   \" 五线城市\",         \"四线城市\",          31,    \n   \" 五线城市\",         \"新一线城市\",         351,   \n   \" 四线城市\",         \"一线城市\",          129,   \n   \" 四线城市\",         \"三线城市\",          85,    \n   \" 四线城市\",         \"二线城市\",          116,   \n   \" 四线城市\",         \"五线城市\",          16,    \n   \" 四线城市\",         \"四线城市\",          55,    \n   \" 四线城市\",         \"新一线城市\",         319,   \n   \" 新一线城市\",        \"一线城市\",          66,    \n   \" 新一线城市\",        \"三线城市\",          40,    \n   \" 新一线城市\",        \"二线城市\",          56,    \n   \" 新一线城市\",        \"五线城市\",          7,     \n   \" 新一线城市\",        \"四线城市\",          12,    \n   \" 新一线城市\",        \"新一线城市\",        281) %>%\n # 线级城市的因子标签重新排序\n  mutate(fre_city_level = fct_relevel(fre_city_level, c(' 一线城市', ' 新一线城市', ' 二线城市', ' 三线城市', ' 四线城市', ' 五线城市'))) %>%\n  mutate(job_city_level = fct_relevel(job_city_level, c('一线城市', '新一线城市', '二线城市', '三线城市', '四线城市', '五线城市'))) \n\n```\n\n```{r}\nknitr::kable(head(city_data))\n```\n\n\n## 桑基图\n\n先直接看个例子。\n\n```{r}\np1 <- city_data %>%\n  ggplot(aes(axis1 = fre_city_level, axis2 = job_city_level, y = total)) +\n  geom_alluvium(aes(fill = job_city_level)) +\n  geom_stratum() +\n  geom_text(stat = \"stratum\",\n            aes(label = after_stat(stratum)), family = 'STXihei') +\n  scale_x_discrete(expand = c(0,0), limits = c('投出简历次数', '接收简历次数')) +\n  scale_y_continuous(expand = c(0,0)) +\n  labs(x = '', y = '') +\n  guides(y = 'none', fill = 'none') +\n  theme_ipsum(base_family = \"STXihei\", grid = '') \n\np1\n```\n\n`axis` 表示桑基图要流经的变量。例如现在我们要看不同线级城市之间的简历数量流动情况，则 `axis1 = fre_city_level` 表示简历从常驻线级城市流出；`axis2 = job_city_level` 表示流入到职位所在的线级城市。\n\n`geom_stratum()` 是给流动变量做进一步分类，例如 `fre_city_level` 和 `job_city_level` 都被分为五个线级城市。另外，`geom_text()` 里 `stat = \"stratum\"` 和 `label = after_stat(stratum)` 是 ggalluvial 内置的固定用法，照着用即可。\n\n`geom_alluvium()` 中，`fill` 参数控制的是流动线条的颜色。`fill = job_city_level` 表示我们以简历流入地为观察视角，看不同线级城市各流入了多少简历。这里也可以简历流出地为观察视角，只需要设置 `fill = job_city_level` 即可。\n\n```{r}\np2 <- city_data %>%\n  ggplot(aes(axis1 = fre_city_level, axis2 = job_city_level, y = total)) +\n  geom_alluvium(aes(fill = job_city_level), curve_type = \"linear\") +\n  geom_stratum() +\n  geom_text(stat = \"stratum\",\n            aes(label = after_stat(stratum)), family = 'STXihei') +\n  scale_x_discrete(expand = c(0,0), limits = c('投出简历次数', '接收简历次数')) +\n  scale_y_continuous(expand = c(0,0)) +\n  labs(x = '', y = '') +\n  guides(y = 'none', fill = 'none') +\n  theme_ipsum(base_family = \"STXihei\", grid = '') \n\np2\n```\n\n基本用法之外，`geom_alluvium()` 函数还有一个 `curve_type` 参数，`curve_type =  \"linear\"` 表示线条使用直线。除了 `linear`，还有 `cubic`、`cubic`、`quintic` 等值，但是肉眼看不出太大区别。\n\n最后需要注意的是，制作桑基图时一般使用宽数据，操作如上所示。长数据也可，只是没有那么容易理解，这里不再演示。\n\n\n## 凹凸图\n\n在看文档的时候，意外发现 ggalluvial 不仅可以制作桑基图，还可以用来制作凹凸图。\n\n```{r}\n# 使用 alluvial package 内置的数据集 Refugees 做测试\ndata(Refugees, package = \"alluvial\")\n\nknitr::kable(head(Refugees))\n\n```\n\n还是直接上个例子。\n\n```{r}\np3 <- Refugees %>%\n  ggplot(\n       aes(x = year, \n           y = refugees/10000, \n           alluvium = country)) +\n  geom_alluvium(aes(fill = country, colour = country), \n                alpha = .75, decreasing = FALSE) +  # decreasing一定要设置为FALSE\n  scale_x_continuous(breaks = seq(2003, 2013, 2)) +\n  theme_ipsum(grid = 'XY') +\n  scale_fill_brewer(type = \"qual\", palette = \"Set3\") +\n  scale_color_brewer(type = \"qual\", palette = \"Set3\") +\n  ggtitle(\"refugee volume by country and region of origin\")\n\np3\n```\n\n上面的 x 轴是年份，y 轴是难民数量，`alluvium` 表示线条的类别，这里表示难民来自哪个国家。注意要把 `geom_alluvium()` 中的 `decreasing` 参数设置为 `FALSE`。\n\n另外 `geom_alluvium` 中的 `width` 参数表示不同年份变化中间的留白，`width = 1` 表示不需要任何留白，经试验，把值设置成 `0.5` 较为美观。\n\n```{r}\np4 <- Refugees %>%\n  ggplot(\n       aes(x = year, \n           y = refugees/10000, \n           alluvium = country)) +\n  geom_alluvium(aes(fill = country, colour = country),\n                alpha = .75, decreasing = FALSE,\n                width = 1) +  # decreasing一定要设置为FALSE\n  scale_x_continuous(breaks = seq(2003, 2013, 2)) +\n  theme_ipsum(grid = 'XY') +\n  scale_fill_brewer(type = \"qual\", palette = \"Set3\") +\n  scale_color_brewer(type = \"qual\", palette = \"Set3\") +\n  guides(fill = 'none', color = 'none') +\n  ggtitle(\"widht = 1\")\n\np5 <- Refugees %>%\n  ggplot(\n       aes(x = year, \n           y = refugees/10000, \n           alluvium = country)) +\n  geom_alluvium(aes(fill = country, colour = country),\n                alpha = .75, decreasing = FALSE,\n                width = 0.5) +  \n  scale_x_continuous(breaks = seq(2003, 2013, 2)) +\n  theme_ipsum(grid = 'XY') +\n  scale_fill_brewer(type = \"qual\", palette = \"Set3\") +\n  scale_color_brewer(type = \"qual\", palette = \"Set3\") +\n  guides(fill = 'none', color = 'none') +\n  ggtitle(\"width = 0.5\")\n\np4 + p5\n\n```\n\n## 注意事项\n\n### stat_stratum()函数报错\n\n首次使用 `stat_stratum()` 函数为数据分类分层时，遇到报错： `Computation failed in stat_stratum`。\n\n在 ggalluvial 的 [Github Issues](https://github.com/corybrunson/ggalluvial/issues/108) 里找到了解决方法：将 `dplyr` 升级至 1.1.0 以后版本。\n\n\n### 流入地和流出地的分类类别不能完全一致\n\n在桑基图的例子中，流入地和流出地都是线级城市，分类类型完全一致，首次 run 的时候报错了。这里用了一个笨办法来解决：给标签重命名，即在X线城市前面加了个空格，在图表显示的时候看不出来。\n\n```{r}\ncity_data <- city_data %>%\n  mutate(fre_city_level = fct_relevel(fre_city_level, c(' 一线城市', ' 新一线城市', ' 二线城市', ' 三线城市', ' 四线城市', ' 五线城市')))\n```\n\n\n\n\n## 相关资源\n\n* [ggalluvial Github Page](https://github.com/corybrunson/ggalluvial)\n\n* [Alluvial Plots in ggplot2](https://corybrunson.github.io/ggalluvial/articles/ggalluvial.html)\n\n* [R Charts: Alluvial plot in ggplot2 with ggalluvial](https://r-charts.com/flow/ggalluvial/)\n\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"toc-depth":3,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"visual","theme":"Simplex","title-block-banner":true,"author":"Boyce","date-format":"YYYY/MM/DD","title":"使用 ggalluvial 制作桑基图和凹凸图","date":"2023/02/23","categories":["R","ggplot2"]},"extensions":{"book":{"multiFile":true}}}}}