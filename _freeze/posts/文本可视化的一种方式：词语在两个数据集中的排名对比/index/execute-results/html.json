{
  "hash": "7bd976ba11fa28c3ca8844970444e52d",
  "result": {
    "markdown": "---\ntitle: \"文本可视化的一种方式：词语在两个数据集中的排名对比\"\nauthor: \"Boyce\"\ndate: \"2023/09/09\"\ncategories: [R, ggplot2]\nexecute: \n  warning: false\n---\n\n\n## 背景\n\n文本是社交媒体上最易获得的数据，但可视化形式却相对单一，基本上是词云一招鲜。\n\n这背后其实更多是分析思路的问题，即不考虑其他维度（时间、关系、分类等），把所有文本一视同仁，简单粗暴地进行分词后做成词云。\n\n而引入对比的视角，不仅可以打开分析思路，还能让文本数据的表现形式更加丰富。\n\n举个例子，当我们想分析短视频平台上\"村BA\"比赛评论的特色时，可以引入对比，即比较\"村BA\"和 NBA 评论的区别，进而提炼出\"村BA\"运动的特色，这会比单独分析\"村BA\"会更加有趣。\n\n## 包引入\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(hrbrthemes)\nlibrary(gghighlight)\nlibrary(readxl)\n```\n:::\n\n\n## 数据引入和清洗\n\n先从 NBA 和\"村BA\"相关短视频中各随机选取 50 万条评论，分词后筛选出词频最高的 1000 个词。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomments_word_top1000 <- read_xlsx(\"comments_word_top1000.xlsx\")\n\nknitr::kable(head(comments_word_top1000))\n```\n\n::: {.cell-output-display}\n|segword |    NBA|   村BA|  total|\n|:-------|------:|------:|------:|\n|赞      | 175390| 222006| 397396|\n|玫瑰    | 159561|  30730| 190291|\n|666     |  68798|  29446|  98244|\n|NA      |  60378|  22901|  83279|\n|爱心    |  64769|  18192|  82961|\n|捂脸    |  29914|  51536|  81450|\n:::\n:::\n\n\n但这里不能直接使用词频进行对比，因为 NBA 和\"村BA\"两个数据集的词语数量不同，无法直接比较。因此我们改为使用排名，即单个词语在各自数据集中的排名。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_comments_word <- comments_word_top1000 %>%\n  mutate(NBA = rank(-NBA, ties.method = \"min\"),\n         村BA = rank(-村BA, ties.method = \"min\")) %>%\n  select(-total)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(head(clean_comments_word))\n```\n\n::: {.cell-output-display}\n|segword | NBA| 村BA|\n|:-------|---:|----:|\n|赞      |   1|    1|\n|玫瑰    |   2|    4|\n|666     |   3|    5|\n|NA      |   5|    8|\n|爱心    |   4|   11|\n|捂脸    |   7|    2|\n:::\n:::\n\n\n这里使用了 `rank` 函数返回排名。其中 `ties.method` 参数表示当两个数值大小一致时采取的计算方法，默认返回均值。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(\n  tibble(\n  origin = rank(c(1,2,3,3,4)),\n  min = rank(c(1,2,3,3,4), ties.method = \"min\"),\n  max = rank(c(1,2,3,3,4), ties.method = \"max\"))\n)\n```\n\n::: {.cell-output-display}\n| origin| min| max|\n|------:|---:|---:|\n|    1.0|   1|   1|\n|    2.0|   2|   2|\n|    3.5|   3|   4|\n|    3.5|   3|   4|\n|    5.0|   5|   5|\n:::\n:::\n\n\n接下来，我们肉眼筛选出能够表达 NBA 和\"村BA\"各自特色的评论词语，以及能够表达两类比赛共同点的评论词语。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_word <- c(\"詹姆斯\", \"库里\", \"欧文\", \"奥尼尔\",\"人民\",\"接地气\",\"纯粹\", \"热爱\", \"气氛\",  \"厉害\",  \"漂亮\", \"加油\", \"支持\")\n```\n:::\n\n\n## 可视化制图\n\n为了对比这些词语在两个数据集中的排位差距，可以采用类折线图的可视化形式。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_comments_word %>%\n  filter(segword %in% selected_word) %>%\n  pivot_longer(cols = c(\"NBA\", \"村BA\"), names_to = \"type\", values_to = \"n\") %>%\n  ggplot(aes(x = type, y = n)) +\n  geom_line(aes(group = segword)) +\n  geom_text(aes(label = segword), family = \"PingFang SC\") +\n  labs(x = \"\", y = \"评论词排名\") +\n  scale_y_reverse() + # 翻转纵坐标轴，排名高的放在上面比较合理\n  hrbrthemes::theme_ipsum(base_family = \"PingFang SC\", grid = \"XY\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n如前所述（也可从图中直观看见），我们可以将这些词语大致分为三类。接着，我们根据词语在两个数据集中的排名差距（以300为界）分成三类，再通过分面的可视化形式展示各自的特点。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_comments_word %>%\n  filter(segword %in% selected_word) %>%\n  mutate(facet = case_when(\n    NBA - 村BA >= 300 ~ \"村BA\\n纯粹热爱\",\n    NBA - 村BA <= -300 ~ \"NBA\\n召唤英雄\",\n    .default = \"共同点\\n为体育喝彩\"\n  )) %>%\n  pivot_longer(cols = c(\"NBA\", \"村BA\"), names_to = \"type\", values_to = \"n\") %>%\n  ggplot(aes(x = type, y = n)) +\n  geom_line(aes(group = segword)) +\n  gghighlight(use_direct_label = FALSE) +\n  geom_text(aes(label = segword), family = \"PingFang SC\") +\n  labs(x = \"\", y = \"评论词排名\") +\n  scale_y_reverse() + # 翻转纵坐标轴，排名高的放在上面比较合理\n  facet_wrap(~facet) +\n  hrbrthemes::theme_ipsum(base_family = \"PingFang SC\", grid = \"XY\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n到这里，图表雏形已经出来了。但还有两个地方可以改进，一是词语的文本会在左右两轴同时出现，太过冗余，现在想要让词语在哪个数据集中排位高，就出现在哪边；二是起始坐标轴应该为 1 而不是 0。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_comments_word %>%\n  filter(segword %in% selected_word) %>%\n  mutate(facet = case_when(\n    NBA - 村BA >= 300 ~ \"村BA\\n纯粹热爱\",\n    NBA - 村BA <= -300 ~ \"NBA\\n召唤英雄\",\n    .default = '共同点\\n为体育喝彩'\n  )) %>%\n  # 设置过滤，返回排名高的数据集名称\n  mutate(text_filter = ifelse(NBA >= 村BA, \"村BA\", \"NBA\")) %>%\n  pivot_longer(cols = c(\"NBA\", \"村BA\"), names_to = \"type\", values_to = \"n\") %>%\n  ggplot(aes(x = type, y = n)) +\n  geom_line(aes(group = segword)) +\n  gghighlight(use_direct_label = FALSE) +\n  # 利用之前设置的过滤条件\n  geom_text(data = . %>% filter(type == text_filter),\n            aes(label = segword), family = \"PingFang SC\") +\n  labs(x = \"\", y = \"评论词排名\") +\n  # 手动设置纵坐标轴\n  scale_y_reverse(breaks = c(1,250, 500, 750, 1000), labels = c(1,250, 500, 750, 1000)) +\n  facet_wrap(~facet) +\n  hrbrthemes::theme_ipsum(base_family = \"PingFang SC\", grid = \"XY\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n到此大功告成，如果有需要，还可在设计软件中进一步调整。\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}